--- /home/aaron/bkup/getaddrinfo.c	2011-03-28 11:06:28.753665192 +0300
+++ ./getaddrinfo.c	2011-03-28 19:52:27.223029910 +0300
@@ -62,6 +62,7 @@
 #include <nscd/nscd-client.h>
 #include <nscd/nscd_proto.h>
 #include <resolv/res_hconf.h>
+#include <arpa/nameser.h>
 
 #ifdef HAVE_LIBIDN
 extern int __idna_to_ascii_lz (const char *input, char **output, int flags);
@@ -73,6 +74,17 @@
 #define GAIH_OKIFUNSPEC 0x0100
 #define GAIH_EAI        ~(GAIH_OKIFUNSPEC)
 
+/*
+Policy table AI bits.
+in 'netdb.h'
+
+# define AI_POLICYTABLE 0x1000 
+
+# define AI_SY0 0x8000
+# define AI_SY1 0x4000
+# define AI_SY2 0x2000
+*/
+
 #ifndef UNIX_PATH_MAX
 # define UNIX_PATH_MAX  108
 #endif
@@ -300,6 +312,8 @@
     }
 
   int port = 0;
+
+/* check service name - port */
   if (service != NULL)
     {
       if ((tp->protoflag & GAI_PROTO_NOSERVICE) != 0)
@@ -391,6 +405,8 @@
 	}
     }
 
+/* check host name */
+
   if (name != NULL)
     {
       at = __alloca (sizeof (struct gaih_addrtuple));
@@ -428,6 +444,7 @@
 	}
 #endif
 
+/* ipv4 digit convert */
       if (__inet_aton (name, (struct in_addr *) at->addr) != 0)
 	{
 	  if (req->ai_family == AF_UNSPEC || req->ai_family == AF_INET)
@@ -446,6 +463,7 @@
 	  if (req->ai_flags & AI_CANONNAME)
 	    canon = name;
 	}
+/* other formats such as ipv6*/
       else if (at->family == AF_UNSPEC)
 	{
 	  char *namebuf = (char *) name;
@@ -464,6 +482,7 @@
 	      else if (req->ai_family == AF_INET
 		       && IN6_IS_ADDR_V4MAPPED (at->addr))
 		{
+                   /* ipv4 mapped address to pure ipv4 */
 		  at->addr[0] = at->addr[3];
 		  at->family = AF_INET;
 		}
@@ -499,9 +518,11 @@
 	    }
 	}
 
+/* host name to ip*/
       if (at->family == AF_UNSPEC && (req->ai_flags & AI_NUMERICHOST) == 0)
 	{
 	  struct gaih_addrtuple **pat = &at;
+          // 'pat' & 'at' points to same now, 'at' is the head of list
 	  int no_data = 0;
 	  int no_inet6_data = 0;
 	  service_user *nip = NULL;
@@ -554,11 +575,13 @@
 		      /* We found data, now convert it into the list.  */
 		      for (int i = 0; h->h_addr_list[i]; ++i)
 			{
+                         // 2nd round, *pat is NULL
 			  if (*pat == NULL)
 			    {
 			      *pat = __alloca (sizeof (struct gaih_addrtuple));
 			      (*pat)->scopeid = 0;
 			    }
+                        // *pat is 'at'
 			  (*pat)->next = NULL;
 			  (*pat)->family = req->ai_family;
 			  if (family == req->ai_family)
@@ -566,6 +589,7 @@
 				    h->h_length);
 			  else
 			    {
+                              /* convert to IPv4 mapped, since it is required */
 			      uint32_t *addr = (uint32_t *) (*pat)->addr;
 			      addr[3] = *(uint32_t *) h->h_addr_list[i];
 			      addr[2] = htonl (0xffff);
@@ -860,6 +884,8 @@
       if (at->family == AF_UNSPEC)
 	return GAIH_OKIFUNSPEC | -EAI_NONAME;
     }
+
+/* 'name' is NULL, for local host bind usage*/
   else
     {
       struct gaih_addrtuple *atr;
@@ -890,6 +916,7 @@
 
   {
     struct gaih_servtuple *st2;
+// 'at' points to the address set, now 'at2' is set to 'at' 
     struct gaih_addrtuple *at2 = at;
     size_t socklen;
     sa_family_t family;
@@ -992,6 +1019,7 @@
 	else
 	  socklen = sizeof (struct sockaddr_in);
 
+        // within the loop of 'at2', that means for each at2
 	for (st2 = st; st2 != NULL; st2 = st2->next)
 	  {
 	    struct addrinfo *ai;
@@ -1007,6 +1035,7 @@
 	    ai->ai_socktype = st2->socktype;
 	    ai->ai_protocol = st2->protocol;
 	    ai->ai_addrlen = socklen;
+            // ai+1 is for sockaddr address
 	    ai->ai_addr = (void *) (ai + 1);
 
 	    /* We only add the canonical name once.  */
@@ -1213,6 +1242,52 @@
   };
 
 
+/* modified label, non const because we need to insert prefix */
+
+static struct prefixentry default_labels_modify[] =
+  {
+    /* See RFC 3484 for the details.  */
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } }
+      }, 128, 0 },
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 16, 2 },
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 96, 3 },
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 } }
+      }, 96, 4 },
+    { { .__in6_u
+	= { .__u6_addr8 = { 0xfe, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 10, 5 },
+    { { .__in6_u
+	= { .__u6_addr8 = { 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 7, 6 },
+    /* Additional rule for Teredo tunnels.  */
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 32, 7 },
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 0, 1 },
+/* NAT64 label, to be modified according to prefix obtained*/
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x00, 0x64, 0xff, 0x9b, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 96, 8 }
+
+  };
+
 /* The precedence table.  */
 static const struct prefixentry *precedence;
 
@@ -1243,6 +1318,42 @@
   };
 
 
+/*modify precedences*/
+/*non-const struct, because we need to modify the entry according to new prefix*/
+
+static struct prefixentry default_precedence_modify[] =
+  {
+    /* See RFC 3484 for the details.  */
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } }
+      }, 128, 50 },
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 16, 30 },
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 96, 20 },
+/* change IPv4 mapped precedence from 10 -> 15 */
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 } }
+      }, 96, 15 },
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 0, 40 },
+/* NAT64 modification, to be modify according to prefix obtained */
+/* default value  64:ff9b::/96   */
+    { { .__in6_u
+	= { .__u6_addr8 = { 0x00, 0x64, 0xff, 0x9b, 0x00, 0x00, 0x00, 0x00,
+			    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }
+      }, 96, 10 }
+  };
+
+
 static int
 match_prefix (const struct sockaddr_in6 *in6,
 	      const struct prefixentry *list, int default_val)
@@ -1937,6 +2048,7 @@
       else
 	new_labels = (struct prefixentry *) default_labels;
 
+      /* Creat array for precedence. */
       struct prefixentry *new_precedence;
       if (nprecedencelist > 0)
 	{
@@ -2059,6 +2171,208 @@
 }
 
 
+static void len2flag (uint16_t len, uint16_t *flag)
+{
+  *flag = 0;
+
+  switch (len)
+  {
+    case 32:
+      *flag |= AI_SY2;
+      break;
+
+    case 40:
+      *flag |= AI_SY1;
+      break;
+
+    case 48:
+      *flag |= (AI_SY1|AI_SY2);
+      break;
+
+    case 56:
+      *flag |= AI_SY0;
+      break;
+
+    case 64:
+      *flag |= (AI_SY0|AI_SY2);
+      break;
+
+    case 96:
+      *flag |= (AI_SY0|AI_SY1);
+      break;
+
+    default :
+// irregular length, clear flag
+      *flag &= 0;
+      break;
+  }
+}
+
+static void flag2len (uint16_t flag, uint16_t *len)
+{
+  *len = 0;
+  switch (flag)
+  {
+    case AI_SY2 :
+      *len = 32;
+      break;
+
+    case AI_SY1 :
+      *len = 40;
+      break;
+
+    case (AI_SY1|AI_SY2) :
+      *len = 48;
+      break;
+
+    case AI_SY0 :
+      *len = 56;
+      break;
+
+    case (AI_SY0|AI_SY2) :
+      *len = 64;
+      break;
+
+    case (AI_SY0|AI_SY1) :
+      *len = 96;
+      break;
+
+    default:
+      *len = 0;
+      break;
+  }
+}
+
+static int fetch_edns0(const char *name, uint16_t *flag)
+{
+/*
+  query DNS64 server for SY bits, and record IPv6 NAT flag
+  return 0 when success
+*/
+
+  ns_msg handle;
+  ns_rr rr;
+  u_int16_t ct = 0;
+  u_char ans[NS_PACKETSZ]= {0};
+  int i;
+  const u_char *cp;
+  int ans_len = 0;
+
+  ans_len = res_search(name, ns_c_in, ns_t_aaaa, ans, NS_PACKETSZ);
+
+  if ( ans_len > 0)
+  {
+    if (ns_initparse(ans, ans_len, &handle) < 0)
+    {
+      return -1;
+    }
+
+    ct = ns_msg_count(handle, ns_s_ar);
+    for (i = (ct-1); i >= 0; i--)
+    {
+      if (ns_parserr(&handle, ns_s_ar, i, &rr) == 0)
+      {
+        if ( (ns_rr_type(rr) == ns_t_opt) && (ns_rr_rdlen(rr) == 6))
+        {
+          cp = ns_rr_rdata(rr);
+          if (ns_get16(cp) == 5)
+          {
+            cp += 2;
+            if (ns_get16(cp) == 2)
+            {
+              cp += 2;
+              *flag = ns_get16(cp);
+              return 0;
+            }
+          }
+        }
+      }
+    }
+    return -1;
+  }
+  else 
+    return -1;
+}
+
+/* 
+   Heuristic function 
+   'v4only_host' is for probing purpose, need to agree with DNS server
+   'hint' is the re-configurable identifier specified, 
+   such as 127.127.127.127  i.e  0x7f7f7f7f
+*/
+
+static int heuri_nat64 (const char *v4only_host, 
+                        const struct sockaddr_in *v4_addr, 
+                        struct in6_addr *in6p, uint16_t *lp)
+{
+     /*
+        look for a host AF_INET6 address, which is known to be ipv4 only, 
+        logics are that check the reply, find our identifier, extract 
+        prefix information and prefix length
+        return 0 when success
+     */
+
+  if(v4_addr->sin_family != AF_INET)
+  {
+    printf("heuri addr type is not AF_INET\n");
+    return -1;
+  }
+  uint16_t i;
+  int last_i = 0;
+  bool found64 = false;
+  unsigned int naddr = 0;
+  struct sockaddr_in6 *sock6p = NULL;
+  uint32_t v4n = htonl(v4_addr->sin_addr.s_addr);
+
+  struct addrinfo *h = malloc(sizeof(struct addrinfo));
+  struct addrinfo *p=NULL;
+  memset(h, '\0', sizeof(struct addrinfo));
+
+  struct addrinfo **end=&p;
+
+  // query v6 address for v4 only host name
+  h->ai_family=AF_INET6;
+  last_i = gaih_inet(v4only_host, NULL, h, end, &naddr);
+
+  if (last_i != 0)
+  {
+    freeaddrinfo (p);
+    return -(last_i & GAIH_EAI);
+  }
+
+  while(*end)
+  {
+    if ((*end)->ai_family==AF_INET6)
+    {
+      // search the pattern in v6 address
+      for(i=0; i<13; i++)
+      {
+        sock6p = (struct sockaddr_in6 *) ((*end)->ai_addr);
+        if(memcmp( &((sock6p->sin6_addr).s6_addr[i]), &(v4n), sizeof(struct in_addr))==0)
+        {
+          found64 = true;
+          break;
+        }
+      }
+    }
+    if (found64)
+      break;
+
+    end=&((*end)->ai_next);
+  } 
+// in6p points to prefix64, 'lp' is for 64_length
+  if(found64)
+  {
+    memset(in6p, '\0', sizeof(struct in6_addr));
+    memcpy(in6p, &(sock6p->sin6_addr), i);
+    *lp= (i*8);
+    return 0;
+  }
+  else
+    return -1;
+}
+
+
 int
 getaddrinfo (const char *name, const char *service,
 	     const struct addrinfo *hints, struct addrinfo **pai)
@@ -2069,6 +2383,19 @@
   struct gaih_service gaih_service, *pservice;
   struct addrinfo local_hints;
 
+/* variables for edns0 and heuri prefix operation*/
+  bool fetch_chk = false;
+  uint16_t nat_flag = 0;
+  uint16_t pre64len = 0;
+  bool find_prefix = false;
+  struct in6_addr prefix64;
+  struct sockaddr_in6 *in6p = NULL;
+
+  struct sockaddr_in default_sav4;
+  inet_pton(AF_INET, "127.127.127.127", &(default_sav4.sin_addr));
+  default_sav4.sin_family = AF_INET;
+  char *default_fqdnv4 = "ipv4only.neonsite.net";
+
   if (name != NULL && name[0] == '*' && name[1] == 0)
     name = NULL;
 
@@ -2087,7 +2414,9 @@
 	  |AI_IDN|AI_CANONIDN|AI_IDN_ALLOW_UNASSIGNED
 	  |AI_IDN_USE_STD3_ASCII_RULES
 #endif
-	  |AI_NUMERICSERV|AI_ALL))
+	  |AI_NUMERICSERV|AI_ALL
+/* new flag for policy table, defined in netdb.h  -- Aaron */
+	  |AI_POLICYTABLE))
     return EAI_BADFLAGS;
 
   if ((hints->ai_flags & AI_CANONNAME) && name == NULL)
@@ -2149,6 +2478,7 @@
 
   struct addrinfo **end = &p;
 
+// now use gaih_inet to fetch all results
   unsigned int naddrs = 0;
   if (hints->ai_family == AF_UNSPEC || hints->ai_family == AF_INET
       || hints->ai_family == AF_INET6)
@@ -2173,6 +2503,84 @@
       return EAI_FAMILY;
     }
 
+/*
+operation logics.
+
+if EDNS okay
+    if successful, set prefix and prefix length, AI_SY bits
+    otherwise unset the AI_POLICY bit
+else 
+    do heuristic protocol
+    if success, get prefix and length, AI_SY bits
+    otherwise unset AI_POLOCY bit
+
+if AI_policy is true
+    modify precedence and sort the address
+else
+    follow the standard way
+
+Append prefix length and prefix to answers and deliver to application
+    AI_SY bits and ai_nat64pre
+*/
+
+/* with EDNS0, we obtain WKP and length by checking the AI_SY bits,
+  and extract the prefix from the response NAT64-IPv6 address
+*/
+
+  if(fetch_edns0(name, &nat_flag) == 0 ) 
+    fetch_chk = true;
+  else 
+  {
+    fetch_chk = false;
+
+    if (hints != NULL && hints->ai_canonname != NULL && hints->ai_addr != NULL)
+    {
+      if ( heuri_nat64(hints->ai_canonname, hints->ai_addr, &prefix64, &pre64len) == 0 )
+      {
+        find_prefix = true;
+        len2flag(pre64len, &nat_flag);
+      }
+      else
+      {
+        find_prefix = false;
+        nat_flag = 0;
+      }
+    }
+    else
+    {
+      if ( heuri_nat64(default_fqdnv4, &(default_sav4), &prefix64, &pre64len) == 0 )
+      {
+        find_prefix = true;
+        len2flag(pre64len, &nat_flag);
+      }
+      else
+      {
+        find_prefix = false;
+        nat_flag = 0;
+      }
+    }
+  }
+
+  if( (fetch_chk == true) && (naddrs == 1))
+  {
+        if (nat_flag != 0)
+        {
+          // find prefix length
+          flag2len(nat_flag, &pre64len);
+        }
+
+        if (pre64len > 0)
+        {
+            if(p->ai_family==AF_INET6)
+            {
+              in6p = (struct sockaddr_in6 *)p->ai_addr;
+              memset(&prefix64, '\0', sizeof(struct in6_addr));
+              memcpy(&prefix64, &(in6p->sin6_addr), (pre64len>>3));
+              find_prefix = true;
+            }
+        }
+  }
+
   if (naddrs > 1)
     {
       /* Read the config file.  */
@@ -2194,6 +2602,8 @@
       int fd = -1;
       int af = AF_UNSPEC;
 
+/* p is pointing to the list of address struct */
+
       for (i = 0, q = p; q != NULL; ++i, last = q, q = q->ai_next)
 	{
 	  results[i].dest_addr = q;
@@ -2330,33 +2740,116 @@
 	 the information.  */
       struct sort_result_combo src
 	= { .results = results, .nresults = nresults };
-      if (__builtin_expect (gaiconf_reload_flag_ever_set, 0))
-	{
-	  __libc_lock_define_initialized (static, lock);
 
-	  __libc_lock_lock (lock);
-	  if (old_once && gaiconf_reload_flag)
-	    gaiconf_reload ();
-	  qsort_r (order, nresults, sizeof (order[0]), rfc3484_sort, &src);
-	  __libc_lock_unlock (lock);
-	}
+//  find NAT64 prefix
+
+      if(fetch_chk == true)
+      {
+        if (nat_flag != 0)
+        {
+          flag2len(nat_flag, &pre64len);
+        }
+
+        if (pre64len > 0)
+        {
+          for (i = 0; i < nresults; i++)
+          {
+            if(results[i].dest_addr->ai_family==AF_INET6)
+            {
+              in6p = (struct sockaddr_in6 *)results[i].dest_addr->ai_addr;
+              memset(&prefix64, '\0', sizeof(struct in6_addr));
+              memcpy(&prefix64, &(in6p->sin6_addr), (pre64len>>3));
+              find_prefix = true;
+              break;
+            }
+          }
+        }
+      }
+      
+/*AI_POLICYTABLE check from here,  we reset the values pointed by 'precedence' 
+
+*/
+      if((hints->ai_flags)&AI_POLICYTABLE)
+      {
+        if(find_prefix)
+        {
+          int s = (sizeof(default_precedence_modify)/sizeof (struct prefixentry));
+          memset(&(default_precedence_modify[s-1].prefix), '\0', sizeof(struct in6_addr));
+          memcpy(&(default_precedence_modify[s-1].prefix), &prefix64, sizeof(struct in6_addr));
+          default_precedence_modify[s-1].bits = pre64len;
+        }
+
+        precedence = (struct prefixentry *)default_precedence_modify;
+        qsort_r (order, nresults, sizeof (order[0]), rfc3484_sort, &src);
+      }
       else
-	qsort_r (order, nresults, sizeof (order[0]), rfc3484_sort, &src);
+      {
+	/*no AI_POLICY flag, use standard procedure */
+        if (__builtin_expect (gaiconf_reload_flag_ever_set, 0))
+        {
+	      __libc_lock_define_initialized (static, lock);
+
+	      __libc_lock_lock (lock);
+	
+          if (old_once && gaiconf_reload_flag)
+	        gaiconf_reload ();
+	
+          qsort_r (order, nresults, sizeof (order[0]), rfc3484_sort, &src);
+	      __libc_lock_unlock (lock);
+	    }
+        else
+          qsort_r (order, nresults, sizeof (order[0]), rfc3484_sort, &src);
+      }
+
+/* end AI_POLICYTABLE*/
 
       /* Queue the results up as they come out of sorting.  */
       q = p = results[order[0]].dest_addr;
+
+      if(find_prefix) 
+      {
+        memset(&p->ai_nat64pre, '\0', sizeof(struct in6_addr));
+        memcpy(&p->ai_nat64pre, &prefix64, sizeof (struct in6_addr));
+      }
+      else
+        memset(&p->ai_nat64pre, '\0', sizeof(struct in6_addr));
+
+      p->ai_flags |= nat_flag;
+
       for (i = 1; i < nresults; ++i)
-	q = q->ai_next = results[order[i]].dest_addr;
+       {
+         q = q->ai_next = results[order[i]].dest_addr;
+         if(find_prefix) 
+         {
+           memset(&q->ai_nat64pre, '\0', sizeof(struct in6_addr));
+           memcpy(&q->ai_nat64pre, &prefix64, sizeof (struct in6_addr));
+         }
+         else
+           memset(&p->ai_nat64pre, '\0', sizeof(struct in6_addr));
+
+         q->ai_flags |= nat_flag;
+       }
       q->ai_next = NULL;
 
       /* Fill in the canonical name into the new first entry.  */
       p->ai_canonname = canonname;
+
     }
 
   free (in6ai);
 
   if (p)
     {
+      if(find_prefix) 
+      {
+           memset(&p->ai_nat64pre, '\0', sizeof(struct in6_addr));
+           memcpy(&p->ai_nat64pre, &prefix64, sizeof (struct in6_addr));
+      }
+      else
+           memset(&p->ai_nat64pre, '\0', sizeof(struct in6_addr));
+
+      p->ai_flags |= nat_flag;
+
       *pai = p;
       return 0;
     }
